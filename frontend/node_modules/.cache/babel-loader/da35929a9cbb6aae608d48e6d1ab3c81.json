{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLoopController = createLoopController;\nexports.default = exports.LoopController = void 0;\n\nfunction LoopControllerClass() {\n  var _this = this;\n  /**\n   * @typedef {Object} Scrollbar\n   * @property {function} update\n   */\n\n  /**\n   * @type {Scrollbar[]}\n   */\n\n\n  var scrollbarsRegister = [];\n  /**\n   * true if loop is active\n   * @type {boolean}\n   */\n\n  var isActive = false;\n  /**\n   * ID of requested animation frame\n   * @type {null|number}\n   */\n\n  var animationFrameId = null;\n  /**\n   * Function that called in animation frame\n   */\n\n  var animationFrameCallback = function animationFrameCallback() {\n    if (!isActive) {\n      return;\n    }\n\n    for (var _i = 0; _i < scrollbarsRegister.length; _i++) {\n      var scrollbar = scrollbarsRegister[_i];\n      scrollbar.update();\n    }\n\n    requestAnimationFrame(animationFrameCallback);\n  };\n  /**\n   * Stop the loop if it wasn't active\n   * @return {LoopControllerClass}\n   */\n\n\n  this.start = function () {\n    if (!isActive) {\n      isActive = true;\n      animationFrameId && cancelAnimationFrame(animationFrameId);\n      requestAnimationFrame(animationFrameCallback);\n    }\n\n    return _this;\n  };\n  /**\n   * Stop the loop if it is active\n   * @return {LoopControllerClass}\n   */\n\n\n  this.stop = function () {\n    if (isActive) {\n      isActive = false;\n      animationFrameId && cancelAnimationFrame(animationFrameId);\n      animationFrameId = null;\n    }\n\n    return _this;\n  };\n  /**\n   * Return the array pf registered scrollbars\n   * @return {Scrollbar[]}\n   */\n\n\n  this.getRegisteredScrollbars = function () {\n    return scrollbarsRegister.concat();\n  };\n  /**\n   * Add the scrollbar to list to iterate each loop\n   * @param {Scrollbar} scrollbar\n   * @return {LoopControllerClass}\n   */\n\n\n  this.registerScrollbar = function (scrollbar) {\n    if (scrollbarsRegister.indexOf(scrollbar) === -1) {\n      scrollbarsRegister.push(scrollbar);\n\n      _this.start();\n    }\n\n    return _this;\n  };\n  /**\n   * Remove the scrollbar from list to iterate each loop\n   * @param {Scrollbar} scrollbar\n   * @return {LoopControllerClass}\n   */\n\n\n  this.unregisterScrollbar = function (scrollbar) {\n    var index = scrollbarsRegister.indexOf(scrollbar);\n\n    if (index !== -1) {\n      scrollbarsRegister.splice(index, 1);\n    }\n\n    return _this;\n  };\n}\n\nvar LoopController = new LoopControllerClass();\nexports.LoopController = LoopController;\nvar _default = LoopController;\n/**\n * Return new instance of LoopControllerClass\n * @return {LoopControllerClass}\n */\n\nexports.default = _default;\n\nfunction createLoopController() {\n  return new LoopControllerClass();\n}","map":null,"metadata":{},"sourceType":"script"}