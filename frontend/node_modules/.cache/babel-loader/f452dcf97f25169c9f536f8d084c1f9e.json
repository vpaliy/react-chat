{"ast":null,"code":"import Promise from 'bluebird';\nimport { Users, People, Rooms } from '../requests';\nexport var fetchContacts = function fetchContacts() {\n  return function (dispatch) {\n    dispatch({\n      type: 'contacts-start'\n    });\n    Promise.join(People.getPeople(), Rooms.getRooms(), function (peopleResponse, roomsResponse) {\n      dispatch({\n        type: 'contacts-finish',\n        people: peopleResponse.payload,\n        rooms: roomsResponse.payload\n      });\n    });\n  };\n};\nexport var deleteUser = function deleteUser(user, index) {\n  return function (dispatch) {\n    dispatch({\n      type: 'delete-user-start',\n      user: user\n    });\n    Users.delete(user).catch(function (error) {\n      dispatch({\n        type: 'delete-user-failed',\n        user: user,\n        index: index\n      });\n    });\n  };\n};\nexport var deleteRoom = function deleteRoom(room, index) {\n  return function (dispatch) {\n    dispatch({\n      type: 'delete-room-start',\n      room: room\n    });\n    Rooms.delete(room).catch(function (error) {\n      dispatch({\n        type: 'delete-room-failed',\n        room: room,\n        index: index\n      });\n    });\n  };\n};\nexport var createRoom = function createRoom(name) {\n  return function (dispatch) {\n    dispatch({\n      type: 'create-room-start'\n    });\n  };\n};","map":{"version":3,"sources":["/home/thevpaliy/projects/slack-temp/slack/src/actions/roomActions.js"],"names":["Promise","Users","People","Rooms","fetchContacts","dispatch","type","join","getPeople","getRooms","peopleResponse","roomsResponse","people","payload","rooms","deleteUser","user","index","delete","catch","error","deleteRoom","room","createRoom","name"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,QAAqC,aAArC;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC7CA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAN,IAAAA,OAAO,CAACO,IAAR,CACIL,MAAM,CAACM,SAAP,EADJ,EAEIL,KAAK,CAACM,QAAN,EAFJ,EAGE,UAACC,cAAD,EAAiBC,aAAjB,EAAmC;AACjCN,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,iBADC;AAEPM,QAAAA,MAAM,EAAEF,cAAc,CAACG,OAFhB;AAGPC,QAAAA,KAAK,EAAEH,aAAa,CAACE;AAHd,OAAD,CAAR;AAKD,KATH;AAWD,GAb4B;AAAA,CAAtB;AAeP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,KAAP;AAAA,SAAiB,UAAAZ,QAAQ,EAAI;AACrDA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,mBADC;AAEPU,MAAAA,IAAI,EAAJA;AAFO,KAAD,CAAR;AAIAf,IAAAA,KAAK,CAACiB,MAAN,CAAaF,IAAb,EAAmBG,KAAnB,CAAyB,UAAAC,KAAK,EAAI;AAChCf,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,oBADC;AAEPU,QAAAA,IAAI,EAAJA,IAFO;AAGPC,QAAAA,KAAK,EAALA;AAHO,OAAD,CAAR;AAKD,KAND;AAOD,GAZyB;AAAA,CAAnB;AAcP,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOL,KAAP;AAAA,SAAiB,UAAAZ,QAAQ,EAAI;AACrDA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,mBADC;AAEPgB,MAAAA,IAAI,EAAJA;AAFO,KAAD,CAAR;AAKAnB,IAAAA,KAAK,CAACe,MAAN,CAAaI,IAAb,EAAmBH,KAAnB,CAAyB,UAAAC,KAAK,EAAI;AAChCf,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,oBADC;AAEPgB,QAAAA,IAAI,EAAJA,IAFO;AAGPL,QAAAA,KAAK,EAALA;AAHO,OAAD,CAAR;AAKD,KAND;AAOD,GAbyB;AAAA,CAAnB;AAeP,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAU,UAAAnB,QAAQ,EAAI;AAC9CA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GAJyB;AAAA,CAAnB","sourcesContent":["import Promise from 'bluebird'\nimport { Users, People, Rooms } from '../requests'\n\nexport const fetchContacts = () => dispatch => {\n  dispatch({ type: 'contacts-start' })\n  Promise.join(\n      People.getPeople(),\n      Rooms.getRooms(),\n    (peopleResponse, roomsResponse) => {\n      dispatch({\n        type: 'contacts-finish',\n        people: peopleResponse.payload,\n        rooms: roomsResponse.payload\n      })\n    }\n  )\n}\n\nexport const deleteUser = (user, index) => dispatch => {\n  dispatch({\n    type: 'delete-user-start',\n    user\n  })\n  Users.delete(user).catch(error => {\n    dispatch({\n      type: 'delete-user-failed',\n      user,\n      index\n    })\n  })\n}\n\nexport const deleteRoom = (room, index) => dispatch => {\n  dispatch({\n    type: 'delete-room-start',\n    room\n  })\n\n  Rooms.delete(room).catch(error => {\n    dispatch({\n      type: 'delete-room-failed',\n      room,\n      index\n    })\n  })\n}\n\nexport const createRoom = (name) => dispatch => {\n  dispatch({\n    type: 'create-room-start',\n  })\n}\n"]},"metadata":{},"sourceType":"module"}